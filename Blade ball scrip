local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")

local Player = Players.LocalPlayer
local Cooldown = tick()
local IsParried = false
local Connection = nil
local ActiveConnection = nil -- Used for toggling

_G.ParryEnabled = _G.ParryEnabled or false -- Ensure global toggle works

local function GetBall()
    for _, Ball in ipairs(workspace.Balls:GetChildren()) do
        if Ball:GetAttribute("realBall") then
            return Ball
        end
    end
end

local function ResetConnection()
    if Connection then
        Connection:Disconnect()
        Connection = nil
    end
end

local function StartParry()
    if ActiveConnection then ActiveConnection:Disconnect() end -- Stop any previous instance

    ActiveConnection = RunService.PreSimulation:Connect(function()
        if not _G.ParryEnabled then
            ActiveConnection:Disconnect()
            ActiveConnection = nil
            return
        end

        local Ball, HRP = GetBall(), Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
        if not Ball or not HRP then return end

        local Speed = Ball.zoomies.VectorVelocity.Magnitude
        local Distance = (HRP.Position - Ball.Position).Magnitude

        if Ball:GetAttribute("target") == Player.Name and not IsParried and Distance / Speed <= 0.55 then
            VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
            IsParried = true
            Cooldown = tick()

            if (tick() - Cooldown) >= 1 then
                IsParried = false
            end
        end
    end)
end

workspace.Balls.ChildAdded:Connect(function()
    if not _G.ParryEnabled then return end
    local Ball = GetBall()
    if not Ball then return end
    ResetConnection()
    Connection = Ball:GetAttributeChangedSignal("target"):Connect(function()
        IsParried = false
    end)
end)

-- **Toggle Function**
if _G.ParryEnabled then
    _G.ParryEnabled = false
    if ActiveConnection then ActiveConnection:Disconnect() end
    if Connection then Connection:Disconnect() end
else
    _G.ParryEnabled = true
    StartParry()
end
