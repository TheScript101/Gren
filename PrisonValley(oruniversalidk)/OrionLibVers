-- Full: Inmate/Officer Inventory ESP + Infinite-Yield-style Chams (Orion toggles)
-- Game-specific for Valley Prison Roleplay teams (Inmates vs Officers)
-- Inventory UI preserved exactly; Chams separated and toggleable.

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local MarketplaceService = game:GetService("MarketplaceService")
local TextService = game:GetService("TextService")

local LocalPlayer = Players.LocalPlayer
while not LocalPlayer do task.wait() end

-- Inmate teams (game-specific)
local INMATE_TEAMS = {
    ["Minimum Security"] = true,
    ["Maximum Security"] = true,
    ["Medium Security"] = true,
    ["Escapee"] = true
}

-- State containers
local espData = {}    -- player -> {billboard, frame, toolFrames = {}}
local chamsData = {}  -- player -> { {part = BasePart, box = BoxHandleAdornment / Highlight, outline = SelectionBox} ... }

-- Visual sizing
local SLOT_SIZE = 20
local TEXT_SLOT_WIDTH = 40
local SLOT_HEIGHT = 20
local SLOT_PADDING = 6
local HORIZONTAL_MARGIN = 12
local MAX_BILLBOARD_WIDTH = 700
local MIN_BILLBOARD_WIDTH = 20

-- Toggles (start OFF)
local inmateInventoryEnabled = false
local inmateChamsEnabled = false
local officerInventoryEnabled = false
local officerChamsEnabled = false

-- Utility
local function safeDestroy(obj)
    if obj and obj.Destroy then
        pcall(function() obj:Destroy() end)
    end
end

local function isInmate(player)
    if not player then return false end
    return player.Team and INMATE_TEAMS[player.Team.Name]
end

local function gatherTools(player)
    local tools, visited = {}, {}
    local backpack = player:FindFirstChild("Backpack")
    if backpack then
        for _, v in ipairs(backpack:GetChildren()) do
            if v:IsA("Tool") and not visited[v] then
                table.insert(tools, v); visited[v] = true
            end
        end
    end
    local char = player.Character
    if char then
        for _, v in ipairs(char:GetChildren()) do
            if v:IsA("Tool") and not visited[v] then
                table.insert(tools, v); visited[v] = true
            end
        end
    end
    return tools
end

local function getTeamColor(player)
    if player.Team and player.Team.TeamColor then
        return player.Team.TeamColor.Color
    end
    return Color3.fromRGB(255,255,255)
end

local function tryGetToolImage(tool)
    if tool:FindFirstChild("TextureId") and tool.TextureId.Value then
        local id = tostring(tool.TextureId.Value):match("(%d+)")
        if id then return tonumber(id) end
    end
    if tool.TextureId and type(tool.TextureId) == "string" and tool.TextureId ~= "" then
        local idFromTexture = tool.TextureId:match("rbxassetid://(%d+)")
        if idFromTexture then return tonumber(idFromTexture) end
    end
    local aid = tonumber(tool:GetAttribute("AssetId") or (tool:FindFirstChild("AssetId") and tonumber(tool.AssetId.Value)))
    if aid and aid > 0 then
        local ok, info = pcall(function() return MarketplaceService:GetProductInfo(aid) end)
        if ok and info and info.IconImageAssetId and info.IconImageAssetId ~= 0 then
            return info.IconImageAssetId
        end
    end
    return nil
end

-- -------------------------
-- CHAMS (Infinite-Yield-style)
-- -------------------------
local function removeChamsForPlayer(player)
    local dat = chamsData[player]
    if not dat then return end
    for _, entry in ipairs(dat) do
        safeDestroy(entry.box)
        safeDestroy(entry.outline)
        safeDestroy(entry.fallbackHighlight)
    end
    chamsData[player] = nil
end

local function makeChamsForChar(player, char)
    removeChamsForPlayer(player)
    if not char then return end

    local parts = {}
    for _, p in ipairs(char:GetDescendants()) do
        if p:IsA("BasePart") then
            table.insert(parts, p)
        end
    end
    if #parts == 0 then return end

    chamsData[player] = {}
    local color = getTeamColor(player)
    local outlineColor = Color3.fromRGB(255,255,255)

    for _, part in ipairs(parts) do
        -- try BoxHandleAdornment
        local ok, box = pcall(function()
            local b = Instance.new("BoxHandleAdornment")
            b.Name = "IV_ChamBox"
            b.Adornee = part
            b.Size = part.Size
            b.AlwaysOnTop = true
            b.ZIndex = 10
            b.Transparency = 0.6
            b.Color3 = color
            b.Parent = workspace
            return b
        end)

        -- try SelectionBox for outline
        local ok2, sel = pcall(function()
            local s = Instance.new("SelectionBox")
            s.Name = "IV_ChamOutline"
            s.Adornee = part
            s.LineThickness = 0.02
            s.Color3 = outlineColor
            s.SurfaceTransparency = 1
            s.Parent = workspace
            return s
        end)

        if ok and box then
            table.insert(chamsData[player], {part = part, box = box, outline = (ok2 and sel or nil)})
        else
            -- fallback to Highlight
            local okh, h = pcall(function()
                local hh = Instance.new("Highlight")
                hh.Name = "IV_Cham_Highlight"
                hh.Adornee = part
                hh.FillTransparency = 0.6
                hh.OutlineTransparency = 0
                hh.Parent = part
                return hh
            end)
            local entry = {part = part, fallbackHighlight = okh and h or nil}
            if ok2 and sel then entry.outline = sel end
            table.insert(chamsData[player], entry)
        end
    end
end

local function updateChamsColorForPlayer(player, color3)
    local dat = chamsData[player]
    if not dat then return end
    for _, entry in ipairs(dat) do
        if entry.box then
            pcall(function() entry.box.Color3 = color3 end)
        elseif entry.fallbackHighlight then
            pcall(function() entry.fallbackHighlight.FillColor = color3 end)
        end
        if entry.outline then
            pcall(function() entry.outline.Color3 = Color3.fromRGB(255,255,255) end)
        end
    end
end

-- -------------------------
-- INVENTORY BILLBOARD (unchanged)
-- -------------------------
local function createBillboardForPlayer(player, char)
    if not char then return end

    -- decide whether inventory should be created for this player category
    local inmate = isInmate(player)
    if inmate and not inmateInventoryEnabled then return end
    if not inmate and not officerInventoryEnabled then return end

    if espData[player] and espData[player].billboard then return end
    local head = char:FindFirstChild("Head") or char:FindFirstChild("HumanoidRootPart")
    if not head then return end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ItemESP_Billboard"
    billboard.Adornee = head
    billboard.AlwaysOnTop = true
    billboard.Size = UDim2.new(0, 160, 0, SLOT_HEIGHT + 6)
    billboard.LightInfluence = 0
    billboard.StudsOffset = Vector3.new(0, 3.8, 0)
    billboard.MaxDistance = math.huge

    local frame = Instance.new("Frame")
    frame.Name = "ItemESP_Frame"
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundTransparency = 0.45
    frame.BackgroundColor3 = Color3.fromRGB(0,0,0)
    frame.BorderSizePixel = 0
    frame.Parent = billboard
    Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 6)

    local listLayout = Instance.new("UIListLayout")
    listLayout.Name = "ItemESP_List"
    listLayout.FillDirection = Enum.FillDirection.Horizontal
    listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    listLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0, SLOT_PADDING)
    listLayout.Parent = frame

    billboard.Parent = char
    espData[player] = {billboard = billboard, frame = frame, toolFrames = {}}
end

local function removeBillboardForPlayer(player)
    if espData[player] and espData[player].billboard then
        safeDestroy(espData[player].billboard)
        espData[player] = nil
    end
end

-- -------------------------
-- Refresh logic (handles both inmate & officer toggles)
-- -------------------------
local function refreshItemsForPlayer(player)
    if player == LocalPlayer then return end

    local inmate = isInmate(player)
    -- only track either inmates or officers depending on toggles; if neither enabled for this player's category, remove visuals
    local wantInventory = (inmate and inmateInventoryEnabled) or (not inmate and officerInventoryEnabled)
    local wantChams = (inmate and inmateChamsEnabled) or (not inmate and officerChamsEnabled)

    -- if player category not tracked at all, clean up
    if not wantInventory and not wantChams then
        removeBillboardForPlayer(player)
        removeChamsForPlayer(player)
        return
    end

    local char = player.Character
    local tools = gatherTools(player)

    -- CHAMS
    if wantChams and char then
        makeChamsForChar(player, char)
        updateChamsColorForPlayer(player, getTeamColor(player))
    else
        removeChamsForPlayer(player)
    end

    -- INVENTORY UI
    if not wantInventory then
        removeBillboardForPlayer(player)
        return
    end

    if #tools == 0 then
        removeBillboardForPlayer(player)
        return
    end

    if not (espData[player] and espData[player].billboard and espData[player].frame) then
        if not char then return end
        createBillboardForPlayer(player, char)
    end

    local frame = espData[player].frame
    for _, child in ipairs(frame:GetChildren()) do
        if child.Name ~= "ItemESP_List" and not child:IsA("UICorner") then
            child:Destroy()
        end
    end
    espData[player].toolFrames = {}

    local totalWidth = HORIZONTAL_MARGIN * 2
    local count = 0
    for _, tool in ipairs(tools) do
        count = count + 1
        local imgId = tryGetToolImage(tool)
        local uiElem, thisWidth
        if imgId then
            uiElem = Instance.new("ImageLabel")
            uiElem.Size = UDim2.new(0, SLOT_SIZE, 0, SLOT_HEIGHT)
            uiElem.BackgroundTransparency = 0.35
            uiElem.BackgroundColor3 = Color3.fromRGB(0,0,0)
            uiElem.Image = "rbxassetid://"..tostring(imgId)
            uiElem.ScaleType = Enum.ScaleType.Fit
            thisWidth = SLOT_SIZE
        else
            uiElem = Instance.new("TextLabel")
            uiElem.BackgroundTransparency = 0.35
            uiElem.BackgroundColor3 = Color3.fromRGB(0,0,0)
            uiElem.Font = Enum.Font.SourceSans
            uiElem.TextSize = 14
            uiElem.TextColor3 = Color3.fromRGB(255,255,255)
            uiElem.Text = tool.Name
            local textBounds = TextService:GetTextSize(tool.Name, uiElem.TextSize, uiElem.Font, Vector2.new(math.huge, SLOT_HEIGHT))
            local autoWidth = math.clamp(textBounds.X + 12, TEXT_SLOT_WIDTH, 200)
            uiElem.Size = UDim2.new(0, autoWidth, 0, SLOT_HEIGHT)
            thisWidth = autoWidth
        end
        Instance.new("UICorner", uiElem).CornerRadius = UDim.new(0,6)
        uiElem.Parent = frame
        espData[player].toolFrames[tool] = uiElem
        totalWidth = totalWidth + thisWidth
    end

    if count > 1 then totalWidth = totalWidth + (count - 1) * SLOT_PADDING end
    totalWidth = math.clamp(totalWidth, MIN_BILLBOARD_WIDTH, MAX_BILLBOARD_WIDTH)
    espData[player].billboard.Size = UDim2.new(0, totalWidth, 0, SLOT_HEIGHT + 6)

    local list = frame:FindFirstChild("ItemESP_List")
    if list then list.Padding = UDim.new(0, SLOT_PADDING) end

    local equipped = {}
    if char then
        for _, c in ipairs(char:GetChildren()) do
            if c:IsA("Tool") then equipped[c] = true end
        end
    end
    for tool, ui in pairs(espData[player].toolFrames) do
        for _, ch in ipairs(ui:GetChildren()) do if ch:IsA("UIStroke") then ch:Destroy() end end
        if equipped[tool] then
            local outline = Instance.new("UIStroke")
            outline.Thickness = 2
            outline.Color = Color3.fromRGB(0,162,255)
            outline.Parent = ui
        end
    end
end

-- -------------------------
-- Per-player setup
-- -------------------------
local function bindBackpack(player, backpack)
    if not backpack then return end
    backpack.ChildAdded:Connect(function() task.wait(0.08) refreshItemsForPlayer(player) end)
    backpack.ChildRemoved:Connect(function() task.wait(0.08) refreshItemsForPlayer(player) end)
end

local function setupPlayer(player)
    if player == LocalPlayer then return end
    player.CharacterAdded:Connect(function(char)
        task.wait(0.12)
        refreshItemsForPlayer(player)
        char.ChildAdded:Connect(function(c) if c:IsA("Tool") then task.wait(0.06) refreshItemsForPlayer(player) end end)
        char.ChildRemoved:Connect(function(c) if c:IsA("Tool") then task.wait(0.06) refreshItemsForPlayer(player) end end)
    end)
    local backpack = player:FindFirstChild("Backpack")
    if backpack then bindBackpack(player, backpack) end
    player.ChildAdded:Connect(function(c) if c:IsA("Backpack") then bindBackpack(player, c) end end)
    player:GetPropertyChangedSignal("Team"):Connect(function() refreshItemsForPlayer(player) end)
    refreshItemsForPlayer(player)
end

for _, p in ipairs(Players:GetPlayers()) do
    if p ~= LocalPlayer then setupPlayer(p) end
end
Players.PlayerAdded:Connect(function(p) if p ~= LocalPlayer then setupPlayer(p) end end)
Players.PlayerRemoving:Connect(function(p)
    removeBillboardForPlayer(p)
    removeChamsForPlayer(p)
    espData[p] = nil
    chamsData[p] = nil
end)

-- -------------------------
-- Periodic refresh + backup rebuild
-- -------------------------
local tick, backupTick = 0, 0
RunService.Heartbeat:Connect(function(dt)
    tick = tick + dt
    backupTick = backupTick + dt

    if tick >= 0.8 then
        tick = 0
        for _, p in ipairs(Players:GetPlayers()) do
            if p ~= LocalPlayer then
                refreshItemsForPlayer(p)
            end
        end
    end

    if backupTick >= 30 then
        backupTick = 0
        -- quick reboot of billboards for players whose inventory is enabled (inmate/officer)
        for _, p in ipairs(Players:GetPlayers()) do
            if p == LocalPlayer then continue end
            local inmate = isInmate(p)
            local wantInventory = (inmate and inmateInventoryEnabled) or (not inmate and officerInventoryEnabled)
            if wantInventory and espData[p] and espData[p].billboard then
                local char = p.Character
                if char then
                    safeDestroy(espData[p].billboard)
                    espData[p] = nil
                    createBillboardForPlayer(p, char)
                    refreshItemsForPlayer(p)
                end
            end
        end
    end
end)

-- -------------------------
-- Orion UI (4 toggles: Inmate/Officer Inventory & Chams)
-- -------------------------
local success, OrionLib = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/jensonhirst/Orion/main/source"))()
end)

-- helper apply functions
local function applyInmateInventory(state)
    inmateInventoryEnabled = state
    if not state then
        for _, p in ipairs(Players:GetPlayers()) do
            if p ~= LocalPlayer and isInmate(p) then
                removeBillboardForPlayer(p)
            end
        end
    else
        for _, p in ipairs(Players:GetPlayers()) do
            if p ~= LocalPlayer and isInmate(p) and p.Character then
                createBillboardForPlayer(p, p.Character)
                refreshItemsForPlayer(p)
            end
        end
    end
end

local function applyInmateChams(state)
    inmateChamsEnabled = state
    if not state then
        for _, p in ipairs(Players:GetPlayers()) do
            if p ~= LocalPlayer and isInmate(p) then
                removeChamsForPlayer(p)
            end
        end
    else
        for _, p in ipairs(Players:GetPlayers()) do
            if p ~= LocalPlayer and isInmate(p) and p.Character then
                makeChamsForChar(p, p.Character)
                updateChamsColorForPlayer(p, getTeamColor(p))
            end
        end
    end
end

local function applyOfficerInventory(state)
    officerInventoryEnabled = state
    if not state then
        for _, p in ipairs(Players:GetPlayers()) do
            if p ~= LocalPlayer and not isInmate(p) then
                removeBillboardForPlayer(p)
            end
        end
    else
        for _, p in ipairs(Players:GetPlayers()) do
            if p ~= LocalPlayer and not isInmate(p) and p.Character then
                createBillboardForPlayer(p, p.Character)
                refreshItemsForPlayer(p)
            end
        end
    end
end

local function applyOfficerChams(state)
    officerChamsEnabled = state
    if not state then
        for _, p in ipairs(Players:GetPlayers()) do
            if p ~= LocalPlayer and not isInmate(p) then
                removeChamsForPlayer(p)
            end
        end
    else
        for _, p in ipairs(Players:GetPlayers()) do
            if p ~= LocalPlayer and not isInmate(p) and p.Character then
                makeChamsForChar(p, p.Character)
                updateChamsColorForPlayer(p, getTeamColor(p))
            end
        end
    end
end

if success and OrionLib then
    local Window = OrionLib:MakeWindow({
        Name = "Valley Prison Roleplay",
        HidePremium = false,
        SaveConfig = false
    })

------------------- Teleports Tab
-- Make a new tab
local TeleportTab = Window:MakeTab({
    Name = "Teleport",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Teleport locations table
local teleportLocations = {
    ["Min/Med Upstairs Cell"] = Vector3.new(2.545670509338379, 24.150676727294922, -121.7835464477539),
    ["Min/Med Library"] = Vector3.new(-17.78934669494629, 11.332402229309082, 14.463046073913574),
    -- Add more locations here
}

-- Generate buttons dynamically
for name, position in pairs(teleportLocations) do
    TeleportTab:AddButton({
        Name = name,
        Callback = function()
            local character = game.Players.LocalPlayer.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = CFrame.new(position)
            end
        end
    })
end

    local Tab = Window:MakeTab({
        Name = "ESP",
        Icon = "rbxassetid://4483345998",
        PremiumOnly = false
    })

    -- Inmate toggles
    Tab:AddToggle({
        Name = "Inmate Inventory ESP",
        Default = inmateInventoryEnabled,
        Callback = function(val) applyInmateInventory(val) end
    })
    Tab:AddToggle({
        Name = "Inmate Chams",
        Default = inmateChamsEnabled,
        Callback = function(val) applyInmateChams(val) end
    })

    -- Officer toggles
    Tab:AddToggle({
        Name = "Officer Inventory ESP",
        Default = officerInventoryEnabled,
        Callback = function(val) applyOfficerInventory(val) end
    })
    Tab:AddToggle({
        Name = "Officer Chams",
        Default = officerChamsEnabled,
        Callback = function(val) applyOfficerChams(val) end
    })

-----others tab
    -- 🟢 New "Others" tab
    local OthersTab = Window:MakeTab({
        Name = "Others",
        Icon = "rbxassetid://4483345998",
        PremiumOnly = false
    })

    -- Drop Tool Button setup (GUI created once, toggle controls visibility)
    local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    local dropToolGui = Instance.new("ScreenGui")
    dropToolGui.Name = "DropToolGui"
    dropToolGui.ResetOnSpawn = false
    dropToolGui.Parent = playerGui
    dropToolGui.Enabled = false -- hidden by default

    local dropToolButton = Instance.new("ImageButton", dropToolGui)
    dropToolButton.Name = "DropToolButton"
    dropToolButton.AnchorPoint = Vector2.new(1, 0)
    dropToolButton.Position = UDim2.new(1, -804, 0, 65)
    dropToolButton.Size = UDim2.new(0, 50, 0, 50)
    dropToolButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    dropToolButton.BackgroundTransparency = 0.5
    dropToolButton.BorderSizePixel = 0
    dropToolButton.Image = "rbxthumb://type=Asset&id=8478993036&w=420&h=420"

    dropToolButton.MouseButton1Click:Connect(function()
        pcall(function()
            keypress(0x08)
            task.wait()
            keyrelease(0x08)
        end)
    end)

    -- Orion toggle to show/hide Drop Tool button
    OthersTab:AddToggle({
        Name = "Drop Tool Button",
        Default = false,
        Callback = function(val)
            dropToolGui.Enabled = val
        end
}) 

-- Camlock Button
OthersTab:AddButton({
    Name = "Camlock",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/TheScript101/Gren/refs/heads/main/PrisonValley(oruniversalidk)/Scripts/Camlock"))()
    end
})

-- Shiftlock Button
OthersTab:AddButton({
    Name = "Shiftlock",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/TheScript101/Gren/refs/heads/main/PrisonValley(oruniversalidk)/Scripts/shiftlock.txt"))()
    end
})

    OrionLib:Init()
else
    warn("Orion failed to load. Toggles will remain variables — set them manually in the script if needed.")
end

-- Toggle Button For Orion UI
local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
local toggleGui = Instance.new("ScreenGui")
toggleGui.Name = "OrionToggleGui"
toggleGui.ResetOnSpawn = false
toggleGui.Parent = playerGui

local toggleButton = Instance.new("ImageButton", toggleGui)
toggleButton.Name = "OrionToggleButton"
toggleButton.AnchorPoint = Vector2.new(1, 0)
toggleButton.Position = UDim2.new(1, -804, 0, 9)  -- moved
toggleButton.Size = UDim2.new(0, 50, 0, 50)        -- size increased from 30x30 to 45x45
toggleButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
toggleButton.BackgroundTransparency = 0.5
toggleButton.BorderSizePixel = 0
toggleButton.Image = "rbxthumb://type=Asset&id=7546367595&w=420&h=420"

toggleButton.MouseButton1Click:Connect(function()
    local orionGui = game.CoreGui:FindFirstChild("Orion")
    if not orionGui and gethui then
        orionGui = gethui():FindFirstChild("Orion")
    end
    if orionGui then
        orionGui.Enabled = not orionGui.Enabled
    end
end)
