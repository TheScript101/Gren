-- Load TurtleLib UI
local lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/Turtle-Brand/Turtle-Lib/main/source.lua"))()
local gui = lib:Window("MM2 Summer Autofarm")

-- Services
local tweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humPart = character:WaitForChild("HumanoidRootPart")
local map
local activeTween = nil

-- Settings
getgenv().TweenSpeed = 5
gui:Slider("Tween Speed", 5, 40, getgenv().TweenSpeed, function(val)
    getgenv().TweenSpeed = val
end)

gui:Label("~ recommended speed 30-35", Color3.fromRGB(127, 143, 166))


-- Alive check
local function isAlive()
    return character and character:FindFirstChild("Humanoid") and character:FindFirstChild("HumanoidRootPart")
end

-- Respawn tracker
player.CharacterAdded:Connect(function(char)
    character = char
    humPart = char:WaitForChild("HumanoidRootPart")
end)

-- Show waiting text
local function showWaitingMessage()
    local gui = Instance.new("BillboardGui")
    local label = Instance.new("TextLabel")
    gui.Size = UDim2.new(5, 0, 2, 0)
    gui.StudsOffset = Vector3.new(0, 3, 0)
    gui.AlwaysOnTop = true
    gui.Name = "WaitMessage"
    gui.Adornee = humPart
    gui.Parent = humPart

    label.Size = UDim2.new(1, 0, 1, 0)
    label.Text = "Waiting for new round..."
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.new(1, 1, 0)
    label.TextScaled = true
    label.Font = Enum.Font.GothamBold
    label.Parent = gui

    return gui
end

-- Wait for RoleSelector UI before farming
local function waitForRound()
    local pg = player:WaitForChild("PlayerGui")
    local waitGui = showWaitingMessage()

    repeat task.wait()
    until pg:FindFirstChild("MainGUI")
        and pg.MainGUI:FindFirstChild("Game")
        and pg.MainGUI.Game:FindFirstChild("RoleSelector")
        and pg.MainGUI.Game.RoleSelector.Visible

    waitGui:Destroy()
end

-- Track map load/unload
workspace.DescendantAdded:Connect(function(m)
    if m:IsA("Model") and m:GetAttribute("MapID") then map = m end
end)
workspace.DescendantRemoving:Connect(function(m)
    if m == map then map = nil end
end)

-- Get BeachBall coin count
local function getBeachBallCount()
    local guiPath = player:FindFirstChild("PlayerGui") and player.PlayerGui:FindFirstChild("MainGUI")
        and player.PlayerGui.MainGUI:FindFirstChild("Lobby") and player.PlayerGui.MainGUI.Lobby:FindFirstChild("Dock")
        and player.PlayerGui.MainGUI.Lobby.Dock:FindFirstChild("CoinBags") and player.PlayerGui.MainGUI.Lobby.Dock.CoinBags:FindFirstChild("Container")
        and player.PlayerGui.MainGUI.Lobby.Dock.CoinBags.Container:FindFirstChild("BeachBall") and player.PlayerGui.MainGUI.Lobby.Dock.CoinBags.Container.BeachBall:FindFirstChild("CurrencyFrame")
        and player.PlayerGui.MainGUI.Lobby.Dock.CoinBags.Container.BeachBall.CurrencyFrame:FindFirstChild("Icon")
        and player.PlayerGui.MainGUI.Lobby.Dock.CoinBags.Container.BeachBall.CurrencyFrame.Icon:FindFirstChild("Coins")

    if guiPath and guiPath:IsA("TextLabel") then
        return tonumber(guiPath.Text:match("%d+")) or 0
    end
    return 0
end

-- Find closest BeachBall coin
local function findClosestBeachBall()
    local closest, dist = nil, math.huge
    local container = map and map:FindFirstChild("CoinContainer")
    if container then
        for _, coin in pairs(container:GetChildren()) do
            if coin:IsA("Part") and coin.Name == "Coin_Server" and coin:GetAttribute("CoinID") == "BeachBall" then
                local vis = coin:FindFirstChild("CoinVisual")
                if vis and vis.Transparency ~= 1 then
                    local d = (humPart.Position - coin.Position).Magnitude
                    if d < dist then
                        dist = d
                        closest = coin
                    end
                end
            end
        end
    end
    return closest
end

-- Tween and detect death or coin cap mid-motion
local function teleportToValidBall()
    local maxRetries = 5
    local attempt = 0

    while attempt < maxRetries do
        local obj = findClosestBeachBall()
        if not obj or not obj:IsDescendantOf(workspace) then return end

        local vis = obj:FindFirstChild("CoinVisual")
        if not vis or vis.Transparency == 1 then
            attempt += 1
            task.wait(0.1)
            continue
        end

        local dist = (humPart.Position - obj.Position).Magnitude
        local time = math.clamp(dist / getgenv().TweenSpeed, 0.2, 5)

        activeTween = tweenService:Create(humPart, TweenInfo.new(time, Enum.EasingStyle.Linear), {
            CFrame = obj.CFrame
        })

        local cancelled = false
        local humanoid = character:FindFirstChild("Humanoid")
        local connA, connB

        if humanoid then
            connA = humanoid.Died:Connect(function()
                cancelled = true
                activeTween:Cancel()
            end)
        end

        connB = game:GetService("RunService").RenderStepped:Connect(function()
            if getBeachBallCount() >= 40 then
                cancelled = true
                activeTween:Cancel()
            elseif not obj:IsDescendantOf(workspace) or vis.Transparency == 1 then
                cancelled = true
                activeTween:Cancel()
            end
        end)

        activeTween:Play()
        activeTween.Completed:Wait()
        activeTween = nil
        if connA then connA:Disconnect() end
        if connB then connB:Disconnect() end

        if cancelled then
            attempt += 1
            task.wait(0.2)
        else
            firetouchinterest(humPart, obj, 0)
            firetouchinterest(humPart, obj, 1)
            return
        end
    end
end

-- Main loop
gui:Toggle("BeachBall Farm (Auto Reset)", false, function(enabled)
    getgenv().farm = enabled
    while getgenv().farm do
        if not isAlive() then
            repeat task.wait() until isAlive()
            waitForRound()
        end

        if not map then
            for _, m in pairs(workspace:GetDescendants()) do
                if m:IsA("Model") and m:GetAttribute("MapID") then
                    map = m
                    break
                end
            end
        end

        local coin = findClosestBeachBall()
        if coin then
            teleportToValidBall()
            task.wait(0.17)
        end

        if getBeachBallCount() >= 40 and isAlive() then
            if activeTween then
                activeTween:Cancel()
                activeTween = nil
            end

            local player = game:GetService("Players").LocalPlayer
            if player.Character then
                player.Character:BreakJoints()
            end



            repeat task.wait() until not isAlive()
            waitForRound()
        end

        task.wait(0.5)
    end
end)

gui:Button("Anti AFK", function()
    local GC = getconnections or get_signal_cons
    if GC then
        for _,v in pairs(GC(plr.Idled)) do
            if v.Disable then v:Disable() elseif v.Disconnect then v:Disconnect() end
        end
    else
        local vu = cloneref(game:GetService("VirtualUser"))
        plr.Idled:Connect(function()
            vu:CaptureController()
            vu:ClickButton2(Vector2.new())
        end)
    end
end)

gui:Label("~ use anti-afk if overnight farming", Color3.fromRGB(127, 143, 166))




-- > Services & Setup < --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LP = Players.LocalPlayer
local roles
local HighlightEnabled = false
local Murder, Sheriff, Hero

local function RemoveHighlights()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LP and player.Character then
            local hl = player.Character:FindFirstChild("Highlight")
            if hl then
                hl:Destroy()
            end
        end
    end
end


-- > TurtleLib Toggle < --
gui:Toggle("Highlight Roles", false, function(state)
    HighlightEnabled = state
    if not state then
        RemoveHighlights()
    end
end)


-- > Helper: IsAlive < --
local function IsAlive(Player)
    for name, info in pairs(roles or {}) do
        if Player.Name == name then
            return not info.Killed and not info.Dead
        end
    end
    return false
end

-- > Create Highlights < --
local function CreateHighlight()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LP and player.Character and not player.Character:FindFirstChild("Highlight") then
            local highlight = Instance.new("Highlight")
            highlight.Name = "Highlight"
            highlight.FillTransparency = 0.3
            highlight.OutlineTransparency = 0
            highlight.OutlineColor = Color3.new(1, 1, 1)
            highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            highlight.Adornee = player.Character
            highlight.Parent = player.Character
        end
    end
end

-- > Update Highlight Colors Based on Roles < --
local function UpdateHighlights()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LP and player.Character then
            local highlight = player.Character:FindFirstChild("Highlight")
            if highlight then
                if player.Name == Sheriff and IsAlive(player) then
                    highlight.FillColor = Color3.fromRGB(0, 0, 225) -- Blue
                elseif player.Name == Murder and IsAlive(player) then
                    highlight.FillColor = Color3.fromRGB(225, 0, 0) -- Red
                elseif player.Name == Hero and IsAlive(player) and not IsAlive(Players[Sheriff]) then
                    highlight.FillColor = Color3.fromRGB(255, 250, 0) -- Yellow
                else
                    highlight.FillColor = Color3.fromRGB(0, 225, 0) -- Green
                end
            end
        end
    end
end

-- > Highlight Update Loop (Only if Toggle Enabled) < --
RunService.RenderStepped:Connect(function()
    if not HighlightEnabled then return end

    roles = ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer()

    for name, info in pairs(roles) do
        if info.Role == "Murderer" then
            Murder = name
        elseif info.Role == "Sheriff" then
            Sheriff = name
        elseif info.Role == "Hero" then
            Hero = name
        end
    end

    CreateHighlight()
    UpdateHighlights()
end)






-------------------UH YEAAAA------------------

-- Services
local Players           = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui        = game:GetService("StarterGui")
local RunService        = game:GetService("RunService")

local Player     = Players.LocalPlayer
local Character  = Player.Character or Player.CharacterAdded:Wait()
local Humanoid   = Character:WaitForChild("Humanoid")
local RootPart   = Character:WaitForChild("HumanoidRootPart")

-- Keep references fresh on respawn
Player.CharacterAdded:Connect(function(char)
    Character = char
    Humanoid  = char:WaitForChild("Humanoid")
    RootPart  = char:WaitForChild("HumanoidRootPart")
end)

-- Simple notification helper
local function Message(title, text, duration)
    StarterGui:SetCore("SendNotification", {
        Title    = title,
        Text     = text,
        Duration = duration or 3
    })
end

-- Your original SkidFling behavior, unmodified
local function SkidFling(TargetPlayer)
    local TCharacter = TargetPlayer.Character
    if not TCharacter then return end

    -- Gather parts
    local THumanoid  = TCharacter:FindFirstChildOfClass("Humanoid")
    local TRootPart  = THumanoid and THumanoid.RootPart
    local THead      = TCharacter:FindFirstChild("Head")
    local Accessory  = TCharacter:FindFirstChildOfClass("Accessory")
    local Handle     = Accessory and Accessory:FindFirstChild("Handle")

    if not (Character and Humanoid and RootPart) then return end

    -- Save old position for return
    if RootPart.Velocity.Magnitude < 50 then
        getgenv().OldPos = RootPart.CFrame
    end

    -- Switch camera to target
    if THead then
        workspace.CurrentCamera.CameraSubject = THead
    elseif Handle then
        workspace.CurrentCamera.CameraSubject = Handle
    elseif THumanoid then
        workspace.CurrentCamera.CameraSubject = THumanoid
    end

    -- Define fling step
    local function FPos(part, offset, ang)
        local cf = CFrame.new(part.Position) * offset * ang
        RootPart.CFrame            = cf
        Character:SetPrimaryPartCFrame(cf)
        RootPart.Velocity          = Vector3.new(9e7, 9e7 * 10, 9e7)
        RootPart.RotVelocity       = Vector3.new(9e8, 9e8, 9e8)
    end

    -- The core fling loop
    local function SFBasePart(part)
        local start = tick()
        local angle = 0

        -- override fall-destroy height
        local oldFDH = workspace.FallenPartsDestroyHeight
        workspace.FallenPartsDestroyHeight = 0/0

        -- BodyVelocity spike
        local BV = Instance.new("BodyVelocity")
        BV.Name       = "EpixVel"
        BV.Parent     = RootPart
        BV.Velocity   = Vector3.new(9e8, 9e8, 9e8)
        BV.MaxForce   = Vector3.new(1/0, 1/0, 1/0)

        -- Unseat you
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)

        repeat
            angle += 100
            FPos(part, CFrame.new(0,  1.5, 0), CFrame.Angles(math.rad(angle),0,0)); task.wait()
            FPos(part, CFrame.new(0, -1.5, 0), CFrame.Angles(math.rad(angle),0,0)); task.wait()
            FPos(part, CFrame.new(2.25, 1.5, -2.25), CFrame.Angles(math.rad(angle),0,0)); task.wait()
            FPos(part, CFrame.new(-2.25, -1.5, 2.25), CFrame.Angles(math.rad(angle),0,0)); task.wait()
        until tick() - start > 2 or (part and part.Velocity.Magnitude > 500)

        -- Cleanup
        BV:Destroy()
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
        workspace.CurrentCamera.CameraSubject = Humanoid
        workspace.FallenPartsDestroyHeight = oldFDH

        -- Return to old position
        repeat
            local returnCFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
            RootPart.CFrame            = returnCFrame
            Character:SetPrimaryPartCFrame(returnCFrame)
            Humanoid:ChangeState("GettingUp")
            for _, x in pairs(Character:GetChildren()) do
                if x:IsA("BasePart") then
                    x.Velocity    = Vector3.new()
                    x.RotVelocity = Vector3.new()
                end
            end
            task.wait()
        until (RootPart.Position - getgenv().OldPos.p).Magnitude < 25
    end

    -- Choose which part to fling around
    local flingPart = THead or TRootPart or Handle
    if flingPart then
        SFBasePart(flingPart)
    else
        Message("SkidFling", "No valid part to fling", 3)
    end
end

-- Toggle in TurtleLib GUI (place this after gui = lib:Window(...))
gui:Toggle("Fling Murd on Die", false, function(state)
    getgenv().FlingMurderOnDeath = state
end)

-- Hook death once per character
local function onCharacter(char)
    local hum = char:WaitForChild("Humanoid")
    hum.Died:Connect(function()
        if not getgenv().FlingMurderOnDeath then return end

        -- Wait for respawn & "Waiting for new round..." BillboardGui
        local newChar = Player.CharacterAdded:Wait()
        local newRoot = newChar:WaitForChild("HumanoidRootPart")
        repeat task.wait() until newRoot:FindFirstChild("WaitMessage")

        -- Fetch roles and fling Murderer
        local ok, roles = pcall(function()
            local rf = ReplicatedStorage:FindFirstChild("GetPlayerData", true)
            return rf and rf:InvokeServer()
        end)
        if not ok or not roles then
            Message("Fling Murd on Die", "Role data failed", 3)
            return
        end

        for name, info in pairs(roles) do
            if info.Role == "Murderer" then
                local tgt = Players:FindFirstChild(name)
                if tgt and tgt ~= Player then
                    Message("Fling Murd on Die", "Targeting: "..tgt.Name, 3)
                    SkidFling(tgt)
                end
                break
            end
        end
    end)
end

-- Initial hook & future respawns
if Player.Character then
    onCharacter(Player.Character)
end
Player.CharacterAdded:Connect(onCharacter)
