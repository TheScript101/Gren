-- Load TurtleLib UI
local lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/Turtle-Brand/Turtle-Lib/main/source.lua"))()
local gui = lib:Window("MM2 Summer Autofarm")

-- Services
local tweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humPart = character:WaitForChild("HumanoidRootPart")
local map

-- Settings
getgenv().TweenSpeed = 20
gui:Slider("Tween Speed", 5, 35, getgenv().TweenSpeed, function(val)
    getgenv().TweenSpeed = val
end)

-- Function to kill the character
local function killCharacter()
    if player.Character then
        player.Character:BreakJoints()
    end
end

-- "Bye world" billboard on respawn
local function onCharacterAdded(char)
    character = char
    humPart = char:WaitForChild("HumanoidRootPart")
    task.wait(1)
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.DisplayName = "Bye world"
        local head = char:FindFirstChild("Head")
        if head then
            local gui = Instance.new("BillboardGui")
            gui.Size = UDim2.new(5, 0, 2, 0)
            gui.StudsOffset = Vector3.new(0, 3, 0)
            gui.Adornee = head
            gui.Parent = head

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1, 0, 1, 0)
            label.Text = "Bye world"
            label.BackgroundTransparency = 1
            label.TextScaled = true
            label.Parent = gui
        end
    end
end

-- Attach respawn logic
player.CharacterAdded:Connect(onCharacterAdded)

-- Check if player is alive
local function isAlive()
    return character and character:FindFirstChild("Humanoid") and character:FindFirstChild("HumanoidRootPart")
end

-- Track map loading/unloading
workspace.DescendantAdded:Connect(function(m)
    if m:IsA("Model") and m:GetAttribute("MapID") then map = m end
end)
workspace.DescendantRemoving:Connect(function(m)
    if m == map then map = nil end
end)

-- Get BeachBall coin count
local function getBeachBallCount()
    local guiPath = player:FindFirstChild("PlayerGui") and player.PlayerGui:FindFirstChild("MainGUI")
        and player.PlayerGui.MainGUI:FindFirstChild("Lobby") and player.PlayerGui.MainGUI.Lobby:FindFirstChild("Dock")
        and player.PlayerGui.MainGUI.Lobby.Dock:FindFirstChild("CoinBags") and player.PlayerGui.MainGUI.Lobby.Dock.CoinBags:FindFirstChild("Container")
        and player.PlayerGui.MainGUI.Lobby.Dock.CoinBags.Container:FindFirstChild("BeachBall") and player.PlayerGui.MainGUI.Lobby.Dock.CoinBags.Container.BeachBall:FindFirstChild("CurrencyFrame")
        and player.PlayerGui.MainGUI.Lobby.Dock.CoinBags.Container.BeachBall.CurrencyFrame:FindFirstChild("Icon")
        and player.PlayerGui.MainGUI.Lobby.Dock.CoinBags.Container.BeachBall.CurrencyFrame.Icon:FindFirstChild("Coins")

    if guiPath and guiPath:IsA("TextLabel") then
        return tonumber(guiPath.Text:match("%d+")) or 0
    end
    return 0
end

-- Find closest coin
local function findClosestBeachBall()
    local closest, dist = nil, math.huge
    local container = map and map:FindFirstChild("CoinContainer")
    if container then
        for _, coin in pairs(container:GetChildren()) do
            if coin:IsA("Part") and coin.Name == "Coin_Server" and coin:GetAttribute("CoinID") == "BeachBall" then
                local vis = coin:FindFirstChild("CoinVisual")
                if vis and vis.Transparency ~= 1 then
                    local d = (humPart.Position - coin.Position).Magnitude
                    if d < dist then
                        dist = d
                        closest = coin
                    end
                end
            end
        end
    end
    return closest
end

-- Tween to coin
local function teleport(obj)
    if obj and humPart and obj:IsDescendantOf(workspace) then
        local dist = (humPart.Position - obj.Position).Magnitude
        local time = math.clamp(dist / getgenv().TweenSpeed, 0.2, 5)
        local tween = tweenService:Create(humPart, TweenInfo.new(time, Enum.EasingStyle.Linear), {
            CFrame = obj.CFrame
        })
        tween:Play()
        tween.Completed:Wait()
        if obj:FindFirstChild("TouchInterest") then
            firetouchinterest(humPart, obj, 0)
            firetouchinterest(humPart, obj, 1)
        end
    end
end

-- Main loop
gui:Toggle("BeachBall Farm (Auto Reset)", false, function(enabled)
    getgenv().farm = enabled
    while getgenv().farm do
        if not isAlive() then repeat task.wait() until isAlive() end

        if not map then
            for _, m in pairs(workspace:GetDescendants()) do
                if m:IsA("Model") and m:GetAttribute("MapID") then
                    map = m
                    break
                end
            end
        end

        local coin = findClosestBeachBall()
        if coin then
            teleport(coin)
            task.wait(0.5)
        end

        if getBeachBallCount() >= 40 and isAlive() then
            killCharacter() -- real reset
            repeat task.wait() until not isAlive()
        end

        task.wait(0.5)
    end
end)
