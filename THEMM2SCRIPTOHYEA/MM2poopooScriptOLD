UK-- Load TurtleLib UI
local lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/Turtle-Brand/Turtle-Lib/main/source.lua"))()
local gui = lib:Window("MM2 Summer Autofarm")

-- Services
local tweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humPart = character:WaitForChild("HumanoidRootPart")
local map
local activeTween = nil

-- Settings
getgenv().TweenSpeed = 5
gui:Slider("Tween Speed", 5, 40, getgenv().TweenSpeed, function(val)
    getgenv().TweenSpeed = val
end)

gui:Label("~ recommended speed 30-35", Color3.fromRGB(127, 143, 166))


-- Alive check
local function isAlive()
    return character and character:FindFirstChild("Humanoid") and character:FindFirstChild("HumanoidRootPart")
end

-- Respawn tracker
player.CharacterAdded:Connect(function(char)
    character = char
    humPart = char:WaitForChild("HumanoidRootPart")
end)

-- Show waiting text
local function showWaitingMessage()
    local gui = Instance.new("BillboardGui")
    local label = Instance.new("TextLabel")
    gui.Size = UDim2.new(5, 0, 2, 0)
    gui.StudsOffset = Vector3.new(0, 3, 0)
    gui.AlwaysOnTop = true
    gui.Name = "WaitMessage"
    gui.Adornee = humPart
    gui.Parent = humPart

    label.Size = UDim2.new(1, 0, 1, 0)
    label.Text = "Waiting for new round..."
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.new(1, 1, 0)
    label.TextScaled = true
    label.Font = Enum.Font.GothamBold
    label.Parent = gui

    return gui
end

-- Wait for RoleSelector UI before farming
local function waitForRound()
    local pg = player:WaitForChild("PlayerGui")
    local waitGui = showWaitingMessage()

    repeat task.wait()
    until pg:FindFirstChild("MainGUI")
        and pg.MainGUI:FindFirstChild("Game")
        and pg.MainGUI.Game:FindFirstChild("RoleSelector")
        and pg.MainGUI.Game.RoleSelector.Visible

    waitGui:Destroy()
end

-- Track map load/unload
workspace.DescendantAdded:Connect(function(m)
    if m:IsA("Model") and m:GetAttribute("MapID") then map = m end
end)
workspace.DescendantRemoving:Connect(function(m)
    if m == map then map = nil end
end)

-- Get BeachBall coin count
local function getBeachBallCount()
    local guiPath = player:FindFirstChild("PlayerGui") and player.PlayerGui:FindFirstChild("MainGUI")
        and player.PlayerGui.MainGUI:FindFirstChild("Lobby") and player.PlayerGui.MainGUI.Lobby:FindFirstChild("Dock")
        and player.PlayerGui.MainGUI.Lobby.Dock:FindFirstChild("CoinBags") and player.PlayerGui.MainGUI.Lobby.Dock.CoinBags:FindFirstChild("Container")
        and player.PlayerGui.MainGUI.Lobby.Dock.CoinBags.Container:FindFirstChild("BeachBall") and player.PlayerGui.MainGUI.Lobby.Dock.CoinBags.Container.BeachBall:FindFirstChild("CurrencyFrame")
        and player.PlayerGui.MainGUI.Lobby.Dock.CoinBags.Container.BeachBall.CurrencyFrame:FindFirstChild("Icon")
        and player.PlayerGui.MainGUI.Lobby.Dock.CoinBags.Container.BeachBall.CurrencyFrame.Icon:FindFirstChild("Coins")

    if guiPath and guiPath:IsA("TextLabel") then
        return tonumber(guiPath.Text:match("%d+")) or 0
    end
    return 0
end

-- Find closest BeachBall coin
local function findClosestBeachBall()
    local closest, dist = nil, math.huge
    local container = map and map:FindFirstChild("CoinContainer")
    if container then
        for _, coin in pairs(container:GetChildren()) do
            if coin:IsA("Part") and coin.Name == "Coin_Server" and coin:GetAttribute("CoinID") == "BeachBall" then
                local vis = coin:FindFirstChild("CoinVisual")
                if vis and vis.Transparency ~= 1 then
                    local d = (humPart.Position - coin.Position).Magnitude
                    if d < dist then
                        dist = d
                        closest = coin
                    end
                end
            end
        end
    end
    return closest
end

-- Tween and detect death or coin cap mid-motion
local function teleport(obj)
    if obj and humPart and obj:IsDescendantOf(workspace) then
        local dist = (humPart.Position - obj.Position).Magnitude
        local time = math.clamp(dist / getgenv().TweenSpeed, 0.2, 5)

        activeTween = tweenService:Create(humPart, TweenInfo.new(time, Enum.EasingStyle.Linear), {
            CFrame = obj.CFrame
        })

        local humanoid = character:FindFirstChild("Humanoid")
        local cancelled = false

        -- Monitor for death or coin cap
        local connA, connB
        if humanoid then
            connA = humanoid.Died:Connect(function()
                cancelled = true
                activeTween:Cancel()
            end)
        end

        connB = game:GetService("RunService").RenderStepped:Connect(function()
            if getBeachBallCount() >= 40 then
                cancelled = true
                activeTween:Cancel()
            end
        end)

        activeTween:Play()
        activeTween.Completed:Wait()
        activeTween = nil

        if connA then connA:Disconnect() end
        if connB then connB:Disconnect() end

        if not cancelled and obj:FindFirstChild("TouchInterest") then
            firetouchinterest(humPart, obj, 0)
            firetouchinterest(humPart, obj, 1)
        end

        -- If reset happened mid-tween
        if cancelled then
            repeat task.wait() until not isAlive()
            waitForRound()
        end
    end
end

-- Main loop
gui:Toggle("BeachBall Farm (Auto Reset)", false, function(enabled)
    getgenv().farm = enabled
    while getgenv().farm do
        if not isAlive() then
            repeat task.wait() until isAlive()
            waitForRound()
        end

        if not map then
            for _, m in pairs(workspace:GetDescendants()) do
                if m:IsA("Model") and m:GetAttribute("MapID") then
                    map = m
                    break
                end
            end
        end

        local coin = findClosestBeachBall()
        if coin then
            teleport(coin)
            task.wait(0.17)
        end

        if getBeachBallCount() >= 40 and isAlive() then
            if activeTween then
                activeTween:Cancel()
                activeTween = nil
            end

            local player = game:GetService("Players").LocalPlayer
            local resetCooldown = false

            if not resetCooldown then
                resetCooldown = true
                if player.Character then
                    player.Character:BreakJoints()
                end
                task.delay(6, function()
                    resetCooldown = false
                end)
            end


            repeat task.wait() until not isAlive()
            waitForRound()
        end

        task.wait(0.5)
    end
end)

gui:Button("Anti AFK", function()
    local GC = getconnections or get_signal_cons
    if GC then
        for _,v in pairs(GC(plr.Idled)) do
            if v.Disable then v:Disable() elseif v.Disconnect then v:Disconnect() end
        end
    else
        local vu = cloneref(game:GetService("VirtualUser"))
        plr.Idled:Connect(function()
            vu:CaptureController()
            vu:ClickButton2(Vector2.new())
        end)
    end
end)

gui:Label("~ use anti-afk if overnight farming", Color3.fromRGB(127, 143, 166))




-- > Services & Setup < --
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LP = Players.LocalPlayer
local roles
local HighlightEnabled = false
local Murder, Sheriff, Hero

local function RemoveHighlights()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LP and player.Character then
            local hl = player.Character:FindFirstChild("Highlight")
            if hl then
                hl:Destroy()
            end
        end
    end
end


-- > TurtleLib Toggle < --
gui:Toggle("Highlight Roles", false, function(state)
    HighlightEnabled = state
    if not state then
        RemoveHighlights()
    end
end)


-- > Helper: IsAlive < --
local function IsAlive(Player)
    for name, info in pairs(roles or {}) do
        if Player.Name == name then
            return not info.Killed and not info.Dead
        end
    end
    return false
end

-- > Create Highlights < --
local function CreateHighlight()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LP and player.Character and not player.Character:FindFirstChild("Highlight") then
            local highlight = Instance.new("Highlight")
            highlight.Name = "Highlight"
            highlight.FillTransparency = 0.3
            highlight.OutlineTransparency = 0
            highlight.OutlineColor = Color3.new(1, 1, 1)
            highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            highlight.Adornee = player.Character
            highlight.Parent = player.Character
        end
    end
end

-- > Update Highlight Colors Based on Roles < --
local function UpdateHighlights()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LP and player.Character then
            local highlight = player.Character:FindFirstChild("Highlight")
            if highlight then
                if player.Name == Sheriff and IsAlive(player) then
                    highlight.FillColor = Color3.fromRGB(0, 0, 225) -- Blue
                elseif player.Name == Murder and IsAlive(player) then
                    highlight.FillColor = Color3.fromRGB(225, 0, 0) -- Red
                elseif player.Name == Hero and IsAlive(player) and not IsAlive(Players[Sheriff]) then
                    highlight.FillColor = Color3.fromRGB(255, 250, 0) -- Yellow
                else
                    highlight.FillColor = Color3.fromRGB(0, 225, 0) -- Green
                end
            end
        end
    end
end

-- > Highlight Update Loop (Only if Toggle Enabled) < --
RunService.RenderStepped:Connect(function()
    if not HighlightEnabled then return end

    roles = ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer()

    for name, info in pairs(roles) do
        if info.Role == "Murderer" then
            Murder = name
        elseif info.Role == "Sheriff" then
            Sheriff = name
        elseif info.Role == "Hero" then
            Hero = name
        end
    end

    CreateHighlight()
    UpdateHighlights()
end)
